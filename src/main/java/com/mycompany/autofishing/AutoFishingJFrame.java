
package com.mycompany.autofishing;


import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JLabel;

/**
 *
 * @author wadwa a wad aw
 */
public class AutoFishingJFrame extends javax.swing.JFrame {

         GameObjectCoordinates detScreen;
         FishingProcess fishProcess;
         PrepareFishing prepFishing;
         TestDrawingFrame testDrawingFrame ;
         Chatting chatting;


         public static boolean [] checkBoxArray = new boolean[5];
         
         public static JLabel StaticLabelFishingArea ;
    /**
     * Creates new form AutoFishingJFrame
     */
    public AutoFishingJFrame() {
        initComponents();

        checkBoxYabbie.setSelected(true);
        checkBoxGold.setSelected(true);
        checkBoxPalamut.setSelected(true);
        
        checkBoxArray[0] = checkBoxYabbie.isSelected();
        checkBoxArray[1] = checkBoxGold.isSelected();
        checkBoxArray[2] = checkBoxPalamut.isSelected();
        checkBoxArray[3] = checkBoxKurbaga.isSelected();
        checkBoxArray[4] = checkBoxAllofThem.isSelected();
         StaticLabelFishingArea = labelFishingArea;
         detScreen = new GameObjectCoordinates();
         fishProcess = new FishingProcess(labelFishingText,labelFishingArea,buttonStartStop);
         prepFishing = fishProcess.getPrepareFishing();
         testDrawingFrame = new TestDrawingFrame(fishProcess);
         chatting = new Chatting(fishProcess);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelFishingArea = new javax.swing.JLabel();
        buttonDefineFishScr = new javax.swing.JButton();
        labelFishingReady = new javax.swing.JLabel();
        buttonStartStop = new javax.swing.JButton();
        labelFishingText = new javax.swing.JLabel();
        buttonScreenShot = new javax.swing.JButton();
        textFieldScreenShot = new javax.swing.JTextField();
        checkBoxYabbie = new javax.swing.JCheckBox();
        checkBoxGold = new javax.swing.JCheckBox();
        checkBoxPalamut = new javax.swing.JCheckBox();
        checkBoxKurbaga = new javax.swing.JCheckBox();
        checkBoxAllofThem = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelFishingArea.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N

        buttonDefineFishScr.setText("Define Screen");
        buttonDefineFishScr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDefineFishScrActionPerformed(evt);
            }
        });

        buttonStartStop.setText("START");
        buttonStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartStopActionPerformed(evt);
            }
        });

        labelFishingText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        buttonScreenShot.setText("Take ScreenShot");
        buttonScreenShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonScreenShotActionPerformed(evt);
            }
        });

        checkBoxYabbie.setText("Yabbie");
        checkBoxYabbie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxYabbieActionPerformed(evt);
            }
        });

        checkBoxGold.setText("Gold Sudak");
        checkBoxGold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxGoldActionPerformed(evt);
            }
        });

        checkBoxPalamut.setText("Palamut");
        checkBoxPalamut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxPalamutActionPerformed(evt);
            }
        });

        checkBoxKurbaga.setText("Kurbaga");
        checkBoxKurbaga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxKurbagaActionPerformed(evt);
            }
        });

        checkBoxAllofThem.setText("Hepsini Tut");
        checkBoxAllofThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllofThemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelFishingArea, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonStartStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelFishingText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonDefineFishScr, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelFishingReady, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(buttonScreenShot, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textFieldScreenShot, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(checkBoxYabbie)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(checkBoxGold))
                                            .addComponent(checkBoxKurbaga))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkBoxAllofThem)
                                            .addComponent(checkBoxPalamut))))
                                .addGap(0, 10, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelFishingArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonDefineFishScr, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelFishingReady, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxYabbie)
                            .addComponent(checkBoxGold)
                            .addComponent(checkBoxPalamut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxKurbaga)
                            .addComponent(checkBoxAllofThem))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(buttonStartStop, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelFishingText, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonScreenShot, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldScreenShot, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDefineFishScrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDefineFishScrActionPerformed
        // TODO add your handling code here:

        /* frame.getContentPane().add(detScreen);
         detScreen.getScreenShot();*/

      testDrawingFrame.setVisible(true);
      testDrawingFrame.drawingScreen.getScreenShot();

         //System.out.println("hashcode 1 value = " + detScreen.hashCode());
         
    }//GEN-LAST:event_buttonDefineFishScrActionPerformed

    private void buttonStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartStopActionPerformed
        // TODO add your handling code here:
        
       // prepFishing.FindFisher();
      
        if(GameStatus.isStopped)
        {
           
           
             labelFishingText.setForeground(Color.BLUE);
             buttonStartStop.setText("STOP");
             fishProcess.setLengthFishingAreaArray(detScreen.getRectFishClickArea());
             fishProcess.Start();
            //prepFishing.MakeCallibration();
          
               /* try {
                    Thread.sleep(1000);
                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(AutoFishingJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }*/
               
        
        }
        else
        {
            fishProcess.Stop();
            buttonStartStop.setText("START");
            labelFishingText.setText("Fishing Bot Is Stopped");
        }
        
        
    }//GEN-LAST:event_buttonStartStopActionPerformed

    private void buttonScreenShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonScreenShotActionPerformed
        // TODO add your handling code here:
      /* new Thread(() ->
        {
           try {
               labelFishingText.setText("detection starting..");
               Robot robot = new Robot();
               Thread.sleep(1000);
               //GameStatus.isStopped = false;
               //GameStatus.isSettingButtonSeemed = true;
               chatting.detectChatTypings();
               /*Rectangle [] rectArray = fishProcess.parseWordsFromOneLineArea(fishProcess.CHAT_WHITE_COLOR,
                       fishProcess.findBorderAreaForWantedColor(fishProcess.CHAT_WHITE_COLOR,chatting.getRectFullChatArea()));

               if(rectArray != null)
               {
                   System.out.println(Arrays.toString(rectArray));
               }*/
              /* int [] compArray = fishProcess.RecordWantedColorIndex(fishProcess.CHAT_WHITE_COLOR,
                       fishProcess.takeScreenShotReturnRGBarray(chatting.getRectChatAreaNameCoor())) ;

               if(fishProcess.compareTwoArraySimpleAlgorithm(compArray,chatting.getArrayRGBcharName(),fishProcess.SENSIBILTY_HIGH))
               {
                   System.out.println("Two array index values is the same ");
               }
               else
               {
                   fishProcess.printArray("chatting array value = ", chatting.getArrayRGBcharName());
                   fishProcess.printArray("compArray value = " , compArray);
               }*/
              /* Rectangle rectTemp = chatting.getRectChatAreaNameCoor();
               System.out.println("detected char name rectangle value = " + rectTemp);
               System.out.println("mySentences rect area = " + chatting.getRectMySentencesArea());*/
              /* if (chatting.getRectMySentencesArea() != null)
               {
                   Rectangle tempREct = fishProcess.findBorderAreaForWantedColor(
                           fishProcess.CHAT_WHITE_COLOR,chatting.getRectMySentencesArea()
                   );
                   if(tempREct != null)
                   {
                       BufferedImage bufImg = robot.createScreenCapture(tempREct);

                       ImageIO.write(bufImg, "png", new File("chatPng//"+String.join(".", textFieldScreenShot.getText(),"png")));
                       System.out.println("İmage is saved succesfully");
                   }

               }
               labelFishingText.setText("detection ended..");
              /* Rectangle rectDeneme = fishProcess.findBorderAreaForWantedColor(fishProcess.CHAT_WHITE_COLOR,
                       new Rectangle(rectTemp.x + rectTemp.width +2 , rectTemp.y, 10,rectTemp.height));
               Rectangle rectFounded  = chatting.getRectSentenceNameArea();//new Rectangle(rectTemp.x,rectTemp.y,rectTemp.width +2,rectTemp.height);
               System.out.println("Rect detection result = "+rectFounded );
               if(rectFounded != null)
               {
                   testDrawingFrame.drawingScreen.rectClickedArea = rectFounded;
               }
               labelFishingText.setText("detection ended..");*/

           //}catch (InterruptedException |AWTException | IOException e)
          /* }catch (AWTException |InterruptedException e)
           {
               System.out.println(e);
           }
        }).start();*/

       /* new Thread(() ->
        {
            labelFishingText.setText("detection started..");
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            chatting.IsLicenceRingIsActive(false);
            labelFishingText.setText("detection ended..");
        }).start();*/

        Runnable r = ()
                -> {
                  /*  TimerGame.Sleep(1000);
                    long startTime = System.currentTimeMillis();
                // Rectangle rect =   prepFishing.findWantedImageFromScreen(fishProcess.getArrayRgbMetin2Icon(),detScreen.getRectMetin2Icon(),null);
               detScreen.scannableRectMt2Icon(fishProcess,detScreen.getRectMetin2Icon());
                System.out.println(detScreen.scannableRectMt2Icon(fishProcess,detScreen.getRectMetin2Icon()));
                System.out.println(System.currentTimeMillis() - startTime);*/
               try {
                    labelFishingText.setText("Ready Your Positon");
                     Thread.sleep(1000);

                 Robot robot = new Robot();
                 Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
                 BufferedImage bufImg = robot.createScreenCapture(new Rectangle(size));
                //BufferedImage bufImg = robot.createScreenCapture(detScreen.getRectClickedArea());
                 if(textFieldScreenShot.getText() != null)
                 {
                     ImageIO.write(bufImg, "png", new File("resources/"+String.join(".", textFieldScreenShot.getText(),"png")));
                 }
                 else
                 {
                      ImageIO.write(bufImg, "png", new File("resources/"+ String.join(".", "1","png")));
                 }
                 
                 labelFishingText.setText("Photo is taken");
             } catch (AWTException | IOException | InterruptedException ex) {
                 System.out.println(ex);
             }
         };
         Thread t = new Thread(r);
         t.start();
        
      
        
    }//GEN-LAST:event_buttonScreenShotActionPerformed

    private void checkBoxYabbieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxYabbieActionPerformed
        // TODO add your handling code here:
        if(checkBoxYabbie.isSelected()) checkBoxArray[0] = checkBoxYabbie.isSelected();
            
         
                
    }//GEN-LAST:event_checkBoxYabbieActionPerformed

    private void checkBoxGoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxGoldActionPerformed
        // TODO add your handling code here:
        if(checkBoxGold.isSelected())checkBoxArray[1] = checkBoxGold.isSelected();
    }//GEN-LAST:event_checkBoxGoldActionPerformed

    private void checkBoxPalamutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxPalamutActionPerformed
        // TODO add your handling code here:
        if(checkBoxPalamut.isSelected())checkBoxArray[2] = checkBoxPalamut.isSelected();
    }//GEN-LAST:event_checkBoxPalamutActionPerformed

    private void checkBoxKurbagaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxKurbagaActionPerformed
        // TODO add your handling code here:
        if(checkBoxKurbaga.isSelected())checkBoxArray[3] = checkBoxKurbaga.isSelected();
    }//GEN-LAST:event_checkBoxKurbagaActionPerformed

    private void checkBoxAllofThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllofThemActionPerformed
        // TODO add your handling code here:
        if(checkBoxAllofThem.isSelected())
        {
           checkBoxYabbie.setEnabled(false);
           checkBoxGold.setEnabled(false);
           checkBoxPalamut.setEnabled(false);
           checkBoxKurbaga.setEnabled(false);

           
            for (int i = 0; i < checkBoxArray.length -1; i++) 
            {
                checkBoxArray[i] = false;
            }
            checkBoxArray[4] = true;
        }
        else
        {
           checkBoxYabbie.setEnabled(true);
           checkBoxGold.setEnabled(true);
           checkBoxPalamut.setEnabled(true);
           checkBoxKurbaga.setEnabled(true);

            for (int i = 0; i < checkBoxArray.length -1; i++)
            {
                checkBoxArray[i] = true;
            }

           checkBoxArray[4] = false;
        }
    }//GEN-LAST:event_checkBoxAllofThemActionPerformed

    private void setLabeltext(JLabel label)
    {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDefineFishScr;
    private javax.swing.JButton buttonScreenShot;
    private javax.swing.JButton buttonStartStop;
    private javax.swing.JCheckBox checkBoxAllofThem;
    private javax.swing.JCheckBox checkBoxGold;
    private javax.swing.JCheckBox checkBoxKurbaga;
    private javax.swing.JCheckBox checkBoxPalamut;
    private javax.swing.JCheckBox checkBoxYabbie;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelFishingArea;
    private javax.swing.JLabel labelFishingReady;
    private javax.swing.JLabel labelFishingText;
    private javax.swing.JTextField textFieldScreenShot;
    // End of variables declaration//GEN-END:variables

   

}
